[
  {
    "id": 1,
    "title": "Count Even Numbers",
    "description": "Write a function that takes an array of numbers and counts the amount of even numbers.",
    "examples": [
      {
        "input": "[1, 2, 3, 4, 5, 6]",
        "output": "3"
      },
      {
        "input": "[7, 9, 11, 13]",
        "output": "0"
      }
    ],
    "testCases": [
      {
        "input": "[1, 2, 3, 4, 5, 6]",
        "expectedOutput": "3"
      },
      {
        "input": "[7, 9, 11, 13]",
        "expectedOutput": "0"
      },
      {
        "input": "[2, 4, 6, 8, 10]",
        "expectedOutput": "5"
      }
    ],
    "hints": [
      "Use the modulus operator (%) to check if a number is even."
    ],
    "bonuses": [
      "Try solving this in one line using .filter()."
    ],
    "functionStub": "function countEvens(arr: number[]): number {\n  // Your code here\n  return 0;\n}",
    "completed": false,
    "difficulty": "EASY"
  },
  {
    "id": 2,
    "title": "Count 'a' in a Sentence",
    "description": "Write a function that loops through every character in a sentence and counts the amount of times the letter 'a' appears.",
    "examples": [
      {
        "input": "\"Apples and bananas are amazing\"",
        "output": "8"
      },
      {
        "input": "\"No 'a' here!\"",
        "output": "1"
      }
    ],
    "testCases": [
      {
        "input": "\"Apples and bananas are amazing\"",
        "expectedOutput": "8"
      },
      {
        "input": "\"No 'a' here!\"",
        "expectedOutput": "1"
      },
      {
        "input": "\"Aardvark at an arcade\"",
        "expectedOutput": "7"
      }
    ],
    "hints": [
      "Loop through the string using a for loop or .split('').forEach()."
    ],
    "bonuses": [
      "Try solving this using .reduce()."
    ],
    "functionStub": "function countLetterA(sentence: string): number {\n  // Your code here\n  return 0;\n}",
    "completed": false,
    "difficulty": "EASY"
  },
  {
    "id": 3,
    "title": "Count Vowels in a Sentence",
    "description": "Write a function that counts the number of times any vowel (a, e, i, o, u) appears in a sentence.",
    "examples": [
      {
        "input": "\"This is a test sentence\"",
        "output": "7"
      },
      {
        "input": "\"BCDEFG\"",
        "output": "1"
      }
    ],
    "testCases": [
      {
        "input": "\"This is a test sentence\"",
        "expectedOutput": "7"
      },
      {
        "input": "\"BCDEFG\"",
        "expectedOutput": "1"
      },
      {
        "input": "\"Unbelievable occurrences!\"",
        "expectedOutput": "10"
      }
    ],
    "hints": [
      "Use a loop and check if a character is in the set of vowels."
    ],
    "bonuses": [
      "You can only use 1 if statement (Hint: use ||).",
      "Create an array of vowels and check if the letter exists in it."
    ],
    "functionStub": "function countVowels(sentence: string): number {\n  // Your code here\n  return 0;\n}",
    "completed": false,
    "difficulty": "EASY"
  },
  {
    "id": 4,
    "title": "Reverse an Array",
    "description": "Write a function that reverses the order of an array of numbers.",
    "examples": [
      {
        "input": "[1, 2, 3, 4, 5]",
        "output": "[5, 4, 3, 2, 1]"
      },
      {
        "input": "[99, 88, 77]",
        "output": "[77, 88, 99]"
      }
    ],
    "testCases": [
      {
        "input": "[1, 2, 3, 4, 5]",
        "expectedOutput": "[5, 4, 3, 2, 1]"
      },
      {
        "input": "[99, 88, 77]",
        "expectedOutput": "[77, 88, 99]"
      },
      {
        "input": "[42]",
        "expectedOutput": "[42]"
      }
    ],
    "hints": [
      "Use the .reverse() method or loop through the array backwards."
    ],
    "bonuses": [
      "Solve this without using .reverse()."
    ],
    "functionStub": "function reverseArray(arr: number[]): number[] {\n  // Your code here\n  return [];\n}",
    "completed": true,
    "difficulty": "MEDIUM"
  },
  {
    "id": 5,
    "title": "First Recurring Character",
    "description": "Write a function that takes an array of numbers and returns the first number that repeats. If no number repeats, return -1.",
    "examples": [
      {
        "input": "[2, 5, 1, 2, 3, 5, 1]",
        "output": "2"
      },
      {
        "input": "[2, 1, 1, 3, 2, 5]",
        "output": "1"
      }
    ],
    "testCases": [
      {
        "input": "[2, 5, 1, 2, 3, 5, 1]",
        "expectedOutput": "2"
      },
      {
        "input": "[2, 3, 4, 5]",
        "expectedOutput": "-1"
      },
      {
        "input": "[2, 1, 1, 3, 2, 5]",
        "expectedOutput": "1"
      }
    ],
    "hints": [
      "Use a Set to keep track of numbers you've seen.",
      "Iterate through the array and check if the current number is already in the Set."
    ],
    "bonuses": [
      "Try solving this in one pass through the array for optimal performance."
    ],
    "functionStub": "function firstRecurringCharacter(arr: number[]): number {\n // Your code here\n return -1;\n}",
    "completed": false,
    "difficulty": "MEDIUM"
  },
  {
    "id": 6,
    "title": "Longest Word in a Sentence",
    "description": "Write a function that takes a string representing a sentence and returns the longest word in the sentence. If there are multiple words with the same length, return the first one encountered.",
    "examples": [
      {
        "input": "\"The quick brown fox jumps over the lazy dog\"",
        "output": "\"quick\""
      },
      {
        "input": "\"Hello world!\"",
        "output": "\"Hello\""
      }
    ],
    "testCases": [
      {
        "input": "\"The quick brown fox jumps over the lazy dog\"",
        "expectedOutput": "\"quick\""
      },
      {
        "input": "\"A journey of a thousand miles begins with a single step\"",
        "expectedOutput": "\"thousand\""
      },
      {
        "input": "\"To be or not to be, that is the question\"",
        "expectedOutput": "\"question\""
      }
    ],
    "hints": [
      "Split the sentence into words using spaces as a delimiter.",
      "Iterate through the words and keep track of the longest one found."
    ],
    "bonuses": [
      "Ignore punctuation when determining word length.",
      "Handle edge cases where the input is an empty string."
    ],
    "functionStub": "function longestWord(sentence: string): string {\n  // Your code here\n  return \"\";\n}",
    "completed": true,
    "difficulty": "EASY"
  },
  {
    "id": 7,
    "title": "Sum of Unique Numbers",
    "description": "Write a function that takes an array of numbers and returns the sum of numbers that appear only once in the array.",
    "examples": [
      {
        "input": "[1, 2, 3, 2, 4, 1, 5]",
        "output": "12"
      },
      {
        "input": "[10, 20, 10, 30, 40, 50, 20]",
        "output": "120"
      }
    ],
    "testCases": [
      {
        "input": "[1, 2, 3, 2, 4, 1, 5]",
        "expectedOutput": "12"
      },
      {
        "input": "[10, 10, 10, 10]",
        "expectedOutput": "0"
      },
      {
        "input": "[5, 7, 5, 8, 9, 8]",
        "expectedOutput": "16"
      }
    ],
    "hints": [
      "Use an object or Map to count occurrences of each number.",
      "Filter out numbers that appear more than once before summing them."
    ],
    "bonuses": [
      "Try solving this using only array methods like reduce and filter.",
      "Optimize for time complexity by using a single pass through the array."
    ],
    "functionStub": "function sumOfUniqueNumbers(arr: number[]): number {\n  // Your code here\n  return 0;\n}",
    "completed": false,
    "difficulty": "MEDIUM"
  },
  {
    "id": 8,
    "title": "Reverse Words in a Sentence",
    "description": "Write a function that takes a string representing a sentence and returns the sentence with the words reversed in order while keeping the characters in each word unchanged.",
    "examples": [
      {
        "input": "\"Hello world\"",
        "output": "\"world Hello\""
      },
      {
        "input": "\"The sky is blue\"",
        "output": "\"blue is sky The\""
      }
    ],
    "testCases": [
      {
        "input": "\"Hello world\"",
        "expectedOutput": "\"world Hello\""
      },
      {
        "input": "\"Keep moving forward\"",
        "expectedOutput": "\"forward moving Keep\""
      },
      {
        "input": "\"Coding is fun\"",
        "expectedOutput": "\"fun is Coding\""
      }
    ],
    "hints": [
      "Use the split method to break the sentence into words.",
      "Reverse the array of words and join them back into a string."
    ],
    "bonuses": [
      "Try solving this without using built-in reverse() method.",
      "Handle edge cases where there are multiple spaces between words."
    ],
    "functionStub": "function reverseWords(sentence: string): string {\n  // Your code here\n  return \"\";\n}",
    "completed": false,
    "difficulty": "EASY"
  },
  {
    "id": 9,
    "title": "Validate Parentheses",
    "description": "Write a function that takes a string containing only the characters '(', ')', '{', '}', '[' and ']' and determines if the input string is valid. A string is valid if open brackets are closed by the same type of brackets in the correct order.",
    "examples": [
      {
        "input": "\"()\"",
        "output": "true"
      },
      {
        "input": "\"()[]{}\"",
        "output": "true"
      },
      {
        "input": "\"(]\"",
        "output": "false"
      }
    ],
    "testCases": [
      {
        "input": "\"()\"",
        "expectedOutput": "true"
      },
      {
        "input": "\"()[]{}\"",
        "expectedOutput": "true"
      },
      {
        "input": "\"(]\"",
        "expectedOutput": "false"
      },
      {
        "input": "\"([)]\"",
        "expectedOutput": "false"
      },
      {
        "input": "\"{[]}\"",
        "expectedOutput": "true"
      }
    ],
    "hints": [
      "Use a stack to keep track of opening brackets.",
      "Pop from the stack when encountering a closing bracket and check for a match."
    ],
    "bonuses": [
      "Try solving this in a single pass through the string.",
      "Optimize for space complexity by not storing unnecessary characters."
    ],
    "functionStub": "function isValidParentheses(s: string): boolean {\n  // Your code here\n  return false;\n}",
    "completed": false,
    "difficulty": "HARD"
  },
  {
    "id": 10,
    "title": "Word Ladder Transformation",
    "description": "Given two words (beginWord and endWord) and a dictionary of words, return the minimum number of transformations required to change beginWord into endWord. Each transformation must change exactly one letter and the new word must exist in the dictionary. If no transformation sequence exists, return -1.",
    "examples": [
      {
        "input": "\"hit\", \"cog\", [\"hot\", \"dot\", \"dog\", \"lot\", \"log\", \"cog\"]",
        "output": "5"
      },
      {
        "input": "\"hit\", \"cog\", [\"hot\", \"dot\", \"dog\", \"lot\", \"log\"]",
        "output": "-1"
      }
    ],
    "testCases": [
      {
        "input": "\"hit\", \"cog\", [\"hot\", \"dot\", \"dog\", \"lot\", \"log\", \"cog\"]",
        "expectedOutput": "5"
      },
      {
        "input": "\"hit\", \"cog\", [\"hot\", \"dot\", \"dog\", \"lot\", \"log\"]",
        "expectedOutput": "-1"
      },
      {
        "input": "\"lost\", \"cost\", [\"most\", \"fost\", \"post\", \"cost\", \"host\"]",
        "expectedOutput": "1"
      }
    ],
    "hints": [
      "Use a breadth-first search (BFS) approach to explore transformations level by level.",
      "Store visited words in a set to avoid cycles.",
      "Try transforming each letter of the word one by one."
    ],
    "bonuses": [
      "Optimize using bidirectional BFS for faster performance.",
      "Implement an efficient lookup to reduce word comparisons."
    ],
    "functionStub": "function wordLadder(beginWord: string, endWord: string, wordList: string[]): number {\n  // Your code here\n  return -1;\n}",
    "completed": false,
    "difficulty": "HARD"
  },
  {
    "id": 11,
    "title": "Find the Maximum Number",
    "description": "Write a function that takes an array of numbers and returns the largest number in the array.",
    "examples": [
      {
        "input": "[1, 5, 3, 9, 2]",
        "output": "9"
      },
      {
        "input": "[10, 20, 30, 5, 15]",
        "output": "30"
      }
    ],
    "testCases": [
      {
        "input": "[1, 5, 3, 9, 2]",
        "expectedOutput": "9"
      },
      {
        "input": "[10, 20, 30, 5, 15]",
        "expectedOutput": "30"
      },
      {
        "input": "[7, 7, 7, 7]",
        "expectedOutput": "7"
      }
    ],
    "hints": [
      "Use a loop to compare each number and keep track of the largest one.",
      "Consider using Math.max with the spread operator for a concise solution."
    ],
    "bonuses": [
      "Try solving this without using built-in Math functions.",
      "Optimize for cases where the array is already sorted."
    ],
    "functionStub": "function findMaxNumber(arr: number[]): number {\n  // Your code here\n  return 0;\n}",
    "completed": false,
    "difficulty": "EASY"
  },
  {
    "id": 12,
    "title": "Sum of Digits",
    "description": "Write a function that takes a non-negative integer and returns the sum of its digits.",
    "examples": [
      {
        "input": "123",
        "output": "6"
      },
      {
        "input": "9876",
        "output": "30"
      }
    ],
    "testCases": [
      {
        "input": "123",
        "expectedOutput": "6"
      },
      {
        "input": "9876",
        "expectedOutput": "30"
      },
      {
        "input": "505",
        "expectedOutput": "10"
      }
    ],
    "hints": [
      "Convert the number to a string and process each digit individually.",
      "Use modulus and division to extract digits without converting to a string."
    ],
    "bonuses": [
      "Solve this using recursion.",
      "Try solving without converting the number to a string."
    ],
    "functionStub": "function sumOfDigits(n: number): number {\n  // Your code here\n  return 0;\n}",
    "completed": false,
    "difficulty": "EASY"
  }
]